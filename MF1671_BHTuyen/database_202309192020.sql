--
-- Script was generated by Devart dbForge Studio 2020 for MySQL, Version 9.0.338.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 9/19/2023 8:20:18 PM
-- Server version: 8.0.33
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE misa_web05_qlts;

--
-- Drop procedure `Proc_GetFixedAssetFilter`
--
DROP PROCEDURE IF EXISTS Proc_GetFixedAssetFilter;

--
-- Drop procedure `Proc_GetFixedAssetPaging`
--
DROP PROCEDURE IF EXISTS Proc_GetFixedAssetPaging;

--
-- Drop procedure `Proc_CreateDepartment`
--
DROP PROCEDURE IF EXISTS Proc_CreateDepartment;

--
-- Drop procedure `Proc_DeleteDepartment`
--
DROP PROCEDURE IF EXISTS Proc_DeleteDepartment;

--
-- Drop procedure `Proc_GetDepartment`
--
DROP PROCEDURE IF EXISTS Proc_GetDepartment;

--
-- Drop procedure `Proc_GetDepartmentByCode`
--
DROP PROCEDURE IF EXISTS Proc_GetDepartmentByCode;

--
-- Drop procedure `Proc_GetDepartments`
--
DROP PROCEDURE IF EXISTS Proc_GetDepartments;

--
-- Drop procedure `Proc_UpdateDepartment`
--
DROP PROCEDURE IF EXISTS Proc_UpdateDepartment;

--
-- Drop table `department`
--
DROP TABLE IF EXISTS department;

--
-- Drop procedure `Proc_CreateReceiver`
--
DROP PROCEDURE IF EXISTS Proc_CreateReceiver;

--
-- Drop procedure `Proc_DeleteReceiver`
--
DROP PROCEDURE IF EXISTS Proc_DeleteReceiver;

--
-- Drop procedure `Proc_DeleteTransferAsset`
--
DROP PROCEDURE IF EXISTS Proc_DeleteTransferAsset;

--
-- Drop procedure `Proc_DeleteReceivers`
--
DROP PROCEDURE IF EXISTS Proc_DeleteReceivers;

--
-- Drop procedure `Proc_GetReceiver`
--
DROP PROCEDURE IF EXISTS Proc_GetReceiver;

--
-- Drop procedure `Proc_GetReceivers`
--
DROP PROCEDURE IF EXISTS Proc_GetReceivers;

--
-- Drop procedure `Proc_UpdateReceiver`
--
DROP PROCEDURE IF EXISTS Proc_UpdateReceiver;

--
-- Drop table `receiver`
--
DROP TABLE IF EXISTS receiver;

--
-- Drop procedure `Proc_CreateTransferAssetDetail`
--
DROP PROCEDURE IF EXISTS Proc_CreateTransferAssetDetail;

--
-- Drop procedure `Proc_DeleteTransferAssetDetail`
--
DROP PROCEDURE IF EXISTS Proc_DeleteTransferAssetDetail;

--
-- Drop procedure `Proc_DeleteTransferAssetDetails`
--
DROP PROCEDURE IF EXISTS Proc_DeleteTransferAssetDetails;

--
-- Drop procedure `Proc_GetTransferAssetDetail`
--
DROP PROCEDURE IF EXISTS Proc_GetTransferAssetDetail;

--
-- Drop procedure `Proc_GetTransferAssetDetailPaging`
--
DROP PROCEDURE IF EXISTS Proc_GetTransferAssetDetailPaging;

--
-- Drop procedure `Proc_GetTransferAssetDetails`
--
DROP PROCEDURE IF EXISTS Proc_GetTransferAssetDetails;

--
-- Drop procedure `Proc_UpdateTransferAssetDetail`
--
DROP PROCEDURE IF EXISTS Proc_UpdateTransferAssetDetail;

--
-- Drop table `transfer_asset_detail`
--
DROP TABLE IF EXISTS transfer_asset_detail;

--
-- Drop procedure `Proc_CreateTransferAsset`
--
DROP PROCEDURE IF EXISTS Proc_CreateTransferAsset;

--
-- Drop procedure `Proc_GetTransferAsset`
--
DROP PROCEDURE IF EXISTS Proc_GetTransferAsset;

--
-- Drop procedure `Proc_GetTransferAssetByCode`
--
DROP PROCEDURE IF EXISTS Proc_GetTransferAssetByCode;

--
-- Drop procedure `Proc_GetTransferAssetPaging`
--
DROP PROCEDURE IF EXISTS Proc_GetTransferAssetPaging;

--
-- Drop procedure `Proc_GetTransferAssets`
--
DROP PROCEDURE IF EXISTS Proc_GetTransferAssets;

--
-- Drop procedure `Proc_UpdateTransferAsset`
--
DROP PROCEDURE IF EXISTS Proc_UpdateTransferAsset;

--
-- Drop table `transfer_asset`
--
DROP TABLE IF EXISTS transfer_asset;

--
-- Drop procedure `Proc_CreateFixedAsset`
--
DROP PROCEDURE IF EXISTS Proc_CreateFixedAsset;

--
-- Drop procedure `Proc_DeleteFixedAsset`
--
DROP PROCEDURE IF EXISTS Proc_DeleteFixedAsset;

--
-- Drop procedure `Proc_GetFixedAsset`
--
DROP PROCEDURE IF EXISTS Proc_GetFixedAsset;

--
-- Drop procedure `Proc_GetFixedAssetByCode`
--
DROP PROCEDURE IF EXISTS Proc_GetFixedAssetByCode;

--
-- Drop procedure `Proc_GetFixedAssets`
--
DROP PROCEDURE IF EXISTS Proc_GetFixedAssets;

--
-- Drop procedure `Proc_UpdateFixedAsset`
--
DROP PROCEDURE IF EXISTS Proc_UpdateFixedAsset;

--
-- Drop procedure `Proc_GetFixedAssetCodeNew`
--
DROP PROCEDURE IF EXISTS Proc_GetFixedAssetCodeNew;

--
-- Drop function `Func_GetFixedAssetCode`
--
DROP FUNCTION IF EXISTS Func_GetFixedAssetCode;

--
-- Drop table `fixed_asset`
--
DROP TABLE IF EXISTS fixed_asset;

--
-- Drop procedure `Proc_CreateFixedAssetCategory`
--
DROP PROCEDURE IF EXISTS Proc_CreateFixedAssetCategory;

--
-- Drop procedure `Proc_DeleteFixedAssetCategory`
--
DROP PROCEDURE IF EXISTS Proc_DeleteFixedAssetCategory;

--
-- Drop procedure `Proc_GetFixedAssetCategories`
--
DROP PROCEDURE IF EXISTS Proc_GetFixedAssetCategories;

--
-- Drop procedure `Proc_GetFixedAssetCategory`
--
DROP PROCEDURE IF EXISTS Proc_GetFixedAssetCategory;

--
-- Drop procedure `Proc_GetFixedAssetCategoryByCode`
--
DROP PROCEDURE IF EXISTS Proc_GetFixedAssetCategoryByCode;

--
-- Drop procedure `Proc_UpdateFixedAssetCategory`
--
DROP PROCEDURE IF EXISTS Proc_UpdateFixedAssetCategory;

--
-- Drop table `fixed_asset_category`
--
DROP TABLE IF EXISTS fixed_asset_category;

--
-- Set default database
--
USE misa_web05_qlts;

--
-- Create table `fixed_asset_category`
--
CREATE TABLE fixed_asset_category (
  FixedAssetCategoryId char(36) NOT NULL COMMENT 'Id loại tài sản',
  FixedAssetCategoryCode varchar(20) NOT NULL DEFAULT '' COMMENT 'Mã loại tài sản',
  FixedAssetCategoryName varchar(100) NOT NULL DEFAULT '' COMMENT 'Tên loại tài sản',
  OrganizationId char(36) DEFAULT NULL COMMENT 'Id của đơn vị',
  DepreciationRate float UNSIGNED NOT NULL COMMENT 'Tỷ lệ hao mòn (%)',
  LifeTime int UNSIGNED NOT NULL COMMENT 'Số năm sử dụng',
  Description varchar(255) DEFAULT NULL COMMENT 'Ghi chú',
  CreatedBy varchar(50) DEFAULT NULL COMMENT 'Người tạo',
  CreatedDate timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày tạo',
  ModifiedBy varchar(50) DEFAULT NULL COMMENT 'Người sửa',
  ModifiedDate timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày sửa',
  PRIMARY KEY (FixedAssetCategoryId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Loại tài sản';

--
-- Create index `FixedAssetCategoryCode` on table `fixed_asset_category`
--
ALTER TABLE fixed_asset_category
ADD UNIQUE INDEX FixedAssetCategoryCode (FixedAssetCategoryCode);

DELIMITER $$

--
-- Create procedure `Proc_UpdateFixedAssetCategory`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_UpdateFixedAssetCategory (IN FixedAssetCategoryId char(36), IN FixedAssetCategoryCode varchar(20),
IN FixedAssetCategoryName varchar(100), IN DepreciationRate float, IN OrganizationId char(36), IN Description varchar(255), IN LifeTime int, IN ModifiedBy varchar(50), IN ModifiedDate timestamp)
COMMENT 'Cập nhập một loại tài sản'
BEGIN
  UPDATE fixed_asset_category fac
  SET fac.FixedAssetCategoryCode = FixedAssetCategoryCode,
      fac.FixedAssetCategoryName = FixedAssetCategoryName,
      fac.DepreciationRate = DepreciationRate,
      fac.OrganizationId = OrganizationId,
      fac.Description = Description,
      fac.LifeTime = LifeTime,
      fac.ModifiedDate = ModifiedDate,
      fac.ModifiedBy = ModifiedBy
  WHERE fac.FixedAssetCategoryId = FixedAssetCategoryId;
END
$$

--
-- Create procedure `Proc_GetFixedAssetCategoryByCode`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetFixedAssetCategoryByCode (IN FixedAssetCategoryCode varchar(20))
COMMENT 'Lấy ra một loại tài sản theo mã loại tài sản'
BEGIN
  SELECT
    *
  FROM fixed_asset_category fac
  WHERE fac.FixedAssetCategoryCode = FixedAssetCategoryCode;
END
$$

--
-- Create procedure `Proc_GetFixedAssetCategory`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetFixedAssetCategory (IN FixedAssetCategoryId char(36))
COMMENT 'Lấy ra một loại tài sản theo Id'
BEGIN
  SELECT
    *
  FROM fixed_asset_category fac
  WHERE fac.FixedAssetCategoryId = FixedAssetCategoryId;
END
$$

--
-- Create procedure `Proc_GetFixedAssetCategories`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetFixedAssetCategories ()
COMMENT 'Lấy ra tất cả loại tài sản'
BEGIN
  SELECT
    *
  FROM fixed_asset_category fac
  ORDER BY fac.ModifiedDate DESC;
END
$$

--
-- Create procedure `Proc_DeleteFixedAssetCategory`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DeleteFixedAssetCategory (IN FixedAssetCategoryId char(36))
COMMENT 'Xóa một loại tài sản theo Id'
BEGIN
  DELETE
    FROM fixed_asset_category
  WHERE fixed_asset_category.FixedAssetCategoryId = FixedAssetCategoryId;
END
$$

--
-- Create procedure `Proc_CreateFixedAssetCategory`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_CreateFixedAssetCategory (IN FixedAssetCategoryId char(36), IN FixedAssetCategoryCode varchar(20),
IN FixedAssetCategoryName varchar(100), IN OrganizationId char(36), IN DepreciationRate float, IN LifeTime int, IN Description varchar(255),
IN CreatedBy varchar(50), IN CreatedDate timestamp, IN ModifiedBy varchar(50), IN ModifiedDate timestamp)
COMMENT 'Tạo mới một loại tài sản'
BEGIN
  INSERT INTO fixed_asset_category (FixedAssetCategoryId, FixedAssetCategoryCode, FixedAssetCategoryName, OrganizationId, DepreciationRate,
  LifeTime, Description, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
    VALUES (FixedAssetCategoryId, FixedAssetCategoryCode, FixedAssetCategoryName, OrganizationId, DepreciationRate, LifeTime, Description, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate);
END
$$

DELIMITER ;

--
-- Create table `fixed_asset`
--
CREATE TABLE fixed_asset (
  FixedAssetId char(36) NOT NULL COMMENT 'Id tài sản',
  FixedAssetCode varchar(20) NOT NULL DEFAULT '' COMMENT 'Mã tài sản',
  FixedAssetName varchar(100) NOT NULL DEFAULT '' COMMENT 'Tên tài sản',
  OrganizationId char(36) DEFAULT NULL COMMENT 'Id của đơn vị',
  OrganizationCode varchar(20) DEFAULT NULL COMMENT 'Mã đơn vị',
  OrganizationName varchar(100) DEFAULT NULL COMMENT 'Tên của đơn vị',
  DepartmentId char(36) NOT NULL DEFAULT '' COMMENT 'Id phòng ban',
  DepartmentCode varchar(20) NOT NULL DEFAULT '' COMMENT 'Mã phòng ban',
  DepartmentName varchar(100) NOT NULL DEFAULT '' COMMENT 'Tên phòng ban',
  FixedAssetCategoryId char(36) NOT NULL DEFAULT '' COMMENT 'Id loại tài sản',
  FixedAssetCategoryCode varchar(20) NOT NULL DEFAULT '' COMMENT 'Mã loại tài sản',
  FixedAssetCategoryName varchar(100) NOT NULL DEFAULT '' COMMENT 'Tên loại tài sản',
  PurchaseDate timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày mua',
  UsingStartedDate timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày bắt đầu sử dụng',
  RemainderCost decimal(19, 4) UNSIGNED DEFAULT NULL COMMENT 'Giá trị còn lại',
  AccumulationDepreciation decimal(19, 4) UNSIGNED DEFAULT NULL COMMENT 'Hao mòn khấu hao lũy kế',
  Cost decimal(19, 4) UNSIGNED NOT NULL COMMENT 'Nguyên giá',
  Quantity int UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Số lượng',
  YearDepreciation decimal(19, 4) UNSIGNED DEFAULT NULL,
  DepreciationRate float UNSIGNED NOT NULL COMMENT 'Tỷ lệ hao mòn (%)',
  TrackedYear int UNSIGNED NOT NULL COMMENT 'Năm bắt đầu theo dõi tài sản trên phần mềm',
  LifeTime int UNSIGNED NOT NULL COMMENT 'Số năm sử dụng',
  ProductionYear int UNSIGNED DEFAULT NULL COMMENT 'Năm sản xuất',
  Active bit(1) DEFAULT b'0' COMMENT 'Sử dụng',
  CreatedBy varchar(50) DEFAULT NULL COMMENT 'Người tạo',
  CreatedDate timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày tạo',
  ModifiedBy varchar(50) DEFAULT NULL COMMENT 'Người sửa',
  ModifiedDate timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày sửa',
  PRIMARY KEY (FixedAssetId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 468,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Tài sản';

--
-- Create index `FixedAssetCode` on table `fixed_asset`
--
ALTER TABLE fixed_asset
ADD UNIQUE INDEX FixedAssetCode (FixedAssetCode);

--
-- Create foreign key
--
ALTER TABLE fixed_asset
ADD CONSTRAINT FK_fixed_asset_FixedAssetCategoryId FOREIGN KEY (FixedAssetCategoryId)
REFERENCES fixed_asset_category (FixedAssetCategoryId);

DELIMITER $$

--
-- Create function `Func_GetFixedAssetCode`
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION Func_GetFixedAssetCode ()
RETURNS varchar(20) CHARSET utf8mb4
READS SQL DATA
COMMENT 'Sinh mã tài sản gợi ý'
BEGIN
  DECLARE FixedAssetCodeOld varchar(20);
  -- Lấy ra mã tài sản được sửa đổi gần nhất
  SET FixedAssetCodeOld = (SELECT
      fa.FixedAssetCode
    FROM fixed_asset fa
    ORDER BY fa.ModifiedDate DESC LIMIT 1);

  -- Nếu không tồn lại thì sinh mặc định là 01
  IF (NOT EXISTS (SELECT
        *
      FROM fixed_asset fa)) THEN
    RETURN '01';
  END IF;

  -- Kiểm tra đến khi mã tài sản không còn bị trùng 
  WHILE
    (FixedAssetCodeOld IN (SELECT
        fa.FixedAssetCode
      FROM fixed_asset fa)) DO
    IF REGEXP_SUBSTR(FixedAssetCodeOld, '(?!0)([0-9]*$)') = '' THEN
      SET FixedAssetCodeOld = REGEXP_REPLACE(FixedAssetCodeOld, '(?!0)([0-9]*$)', CONVERT(CONVERT(REGEXP_SUBSTR(FixedAssetCodeOld, '(?!0)([0-9]*)'), binary) + 1, char(20)));
    ELSE
      SET FixedAssetCodeOld = REGEXP_REPLACE(FixedAssetCodeOld, '(?!0)([0-9]+$)', CONVERT(CONVERT(REGEXP_SUBSTR(FixedAssetCodeOld, '(?!0)([0-9]+$)'), binary) + 1, char(20)));
    END IF;
  END WHILE;

  RETURN FixedAssetCodeOld;

END
$$

--
-- Create procedure `Proc_GetFixedAssetCodeNew`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetFixedAssetCodeNew ()
COMMENT 'Sinh mã tài sản mới gợi ý'
BEGIN
  SELECT
    Func_GetFixedAssetCode();
END
$$

--
-- Create procedure `Proc_UpdateFixedAsset`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_UpdateFixedAsset (IN FixedAssetId char(36), IN FixedAssetCode varchar(20), IN FixedAssetName varchar(100),
IN OrganizationId char(36), IN OrganizationCode varchar(20), IN OrganizationName varchar(100),
IN DepartmentId char(36), IN DepartmentCode varchar(20), IN DepartmentName varchar(100), IN FixedAssetCategoryId char(36),
IN FixedAssetCategoryCode varchar(20), IN FixedAssetCategoryName varchar(100), IN PurchaseDate timestamp, IN UsingStartedDate timestamp,
IN Cost decimal(19, 4), IN RemainderCost decimal(19, 4), IN Quantity int, IN DepreciationRate float, IN TrackedYear int, IN LifeTime int, IN ProductionYear int, IN Active bit(1),
IN ModifiedBy varchar(50), IN ModifiedDate timestamp)
COMMENT 'Cập nhật một tài sản'
BEGIN
  UPDATE fixed_asset fa
  SET fa.FixedAssetCode = FixedAssetCode,
      fa.FixedAssetName = FixedAssetName,
      fa.OrganizationId = OrganizationId,
      fa.OrganizationCode = OrganizationName,
      fa.OrganizationName = OrganizationName,
      fa.DepartmentId = DepartmentId,
      fa.DepartmentCode = DepartmentCode,
      fa.DepartmentName = DepartmentName,
      fa.FixedAssetCategoryId = FixedAssetCategoryId,
      fa.FixedAssetCategoryCode = FixedAssetCategoryCode,
      fa.FixedAssetCategoryName = FixedAssetCategoryName,
      fa.PurChaseDate = PurChaseDate,
      fa.UsingStartedDate = UsingStartedDate,
      fa.Cost = Cost,
      fa.RemainderCost = RemainderCost,
      fa.Quantity = Quantity,
      fa.DepreciationRate = DepreciationRate,
      fa.TrackedYear = TrackedYear,
      fa.LifeTime = LifeTime,
      fa.ProductionYear = ProductionYear,
      fa.Active = Active,
      fa.ModifiedDate = ModifiedDate,
      fa.ModifiedBy = ModifiedBy
  WHERE fa.FixedAssetId = FixedAssetId;
END
$$

--
-- Create procedure `Proc_GetFixedAssets`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetFixedAssets ()
COMMENT 'Lấy ra tấy cả tài sản'
BEGIN
  SELECT
    *
  FROM fixed_asset fa
  ORDER BY fa.ModifiedDate DESC;
END
$$

--
-- Create procedure `Proc_GetFixedAssetByCode`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetFixedAssetByCode (IN FixedAssetCode varchar(20))
COMMENT 'Lấy ra một tài sản theo mã tài sản'
BEGIN
  SELECT
    *
  FROM fixed_asset fa
  WHERE fa.FixedAssetCode = FixedAssetCode;
END
$$

--
-- Create procedure `Proc_GetFixedAsset`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetFixedAsset (IN FixedAssetId char(36))
COMMENT 'Lấy ra một tài sản theo Id của tài sản'
BEGIN
  SELECT
    *
  FROM fixed_asset fa
  WHERE fa.FixedAssetId = FixedAssetId;
END
$$

--
-- Create procedure `Proc_DeleteFixedAsset`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DeleteFixedAsset (IN FixedAssetId char(36))
COMMENT 'Xóa một tài sản theo Id'
BEGIN
  DELETE
    FROM fixed_asset
  WHERE fixed_asset.FixedAssetId = FixedAssetId;
END
$$

--
-- Create procedure `Proc_CreateFixedAsset`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_CreateFixedAsset (IN FixedAssetId char(36), IN FixedAssetCode varchar(20), IN FixedAssetName varchar(100),
IN OrganizationId char(36), IN OrganizationCode varchar(20), IN OrganizationName varchar(100),
IN DepartmentId char(36), IN DepartmentCode varchar(20), IN DepartmentName varchar(100), IN FixedAssetCategoryId char(36),
IN FixedAssetCategoryCode varchar(20), IN FixedAssetCategoryName varchar(100), IN PurchaseDate timestamp, IN UsingStartedDate timestamp,
IN Cost decimal(19, 4), IN RemainderCost decimal(19, 4), IN Quantity int, IN DepreciationRate float, IN AccumulationDepreciation decimal(19, 4),
IN YearDepreciation decimal(19, 4), IN TrackedYear int, IN LifeTime int, IN ProductionYear int, IN Active bit(1),
IN CreatedBy varchar(50), IN CreatedDate timestamp, IN ModifiedBy varchar(50), IN ModifiedDate timestamp)
COMMENT 'Tạo mới một tài sản'
BEGIN
  INSERT INTO fixed_asset (FixedAssetId, FixedAssetCode, FixedAssetName, OrganizationId, OrganizationCode, OrganizationName, DepartmentId,
  DepartmentCode, DepartmentName, FixedAssetCategoryId, FixedAssetCategoryCode, FixedAssetCategoryName, PurchaseDate, UsingStartedDate, Cost, RemainderCost,
  Quantity, DepreciationRate, AccumulationDepreciation, TrackedYear, LifeTime, ProductionYear, Active, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
    VALUES (FixedAssetId, FixedAssetCode, FixedAssetName, OrganizationId, OrganizationCode, OrganizationName, DepartmentId, DepartmentCode, DepartmentName, FixedAssetCategoryId, FixedAssetCategoryCode, FixedAssetCategoryName, PurchaseDate, UsingStartedDate, Cost, RemainderCost, Quantity, DepreciationRate, TrackedYear, LifeTime, ProductionYear, Active, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate);
END
$$

DELIMITER ;

--
-- Create table `transfer_asset`
--
CREATE TABLE transfer_asset (
  TransferAssetId char(36) NOT NULL DEFAULT '' COMMENT 'Id của chứng từ',
  TransferAssetCode varchar(20) NOT NULL DEFAULT '' COMMENT 'Mã của chứng từ',
  TransactionDate timestamp NULL DEFAULT NULL COMMENT 'Ngày chứng từ',
  TransferDate timestamp NULL DEFAULT NULL COMMENT 'Ngày điều chuyển',
  Cost decimal(19, 4) UNSIGNED DEFAULT NULL COMMENT 'Nguyên giá',
  RemainderCost decimal(19, 4) UNSIGNED DEFAULT NULL COMMENT 'Giá trị còn lại',
  Note varchar(255) DEFAULT NULL COMMENT 'Ghi chú',
  CreatedBy varchar(50) DEFAULT NULL COMMENT 'Người tạo',
  CreateDate timestamp NULL DEFAULT NULL COMMENT 'Ngày tạo',
  ModifiedBy varchar(50) DEFAULT NULL COMMENT 'Người sửa đổi',
  ModifiedDate timestamp NULL DEFAULT NULL COMMENT 'Ngày sửa đổi',
  PRIMARY KEY (TransferAssetId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Bảng điều chuyển tài sản';

DELIMITER $$

--
-- Create procedure `Proc_UpdateTransferAsset`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_UpdateTransferAsset (IN TransferAssetId char(36), IN TransferAssetCode varchar(20),
IN TransactionDate timestamp, IN TransferDate timestamp, IN Cost decimal(19, 4), IN RemainderCost decimal(19, 4),
IN Note varchar(255), IN ModifiedBy varchar(50), IN ModifiedDate timestamp)
COMMENT 'Cập nhật một chứng từ'
BEGIN
  UPDATE transfer_asset ta
  SET ta.TransferAssetCode = TransferAssetCode,
      ta.TransactionDate = TransactionDate,
      ta.TransferDate = TransferDate,
      ta.Cost = Cost,
      ta.RemainderCost = RemainderCost,
      ta.Note = Note,
      ta.ModifiedBy = ModifiedBy,
      ta.ModifiedDate = ModifiedDate
  WHERE ta.TransferAssetId = TransferAssetId;
END
$$

--
-- Create procedure `Proc_GetTransferAssets`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetTransferAssets ()
COMMENT 'Lẩy ra tất cả chứng từ điều chuyển tài sản'
BEGIN
  SELECT
    *
  FROM transfer_asset ta
  ORDER BY ta.ModifiedDate DESC;
END
$$

--
-- Create procedure `Proc_GetTransferAssetPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetTransferAssetPaging (OUT TransferAssetTotal int, IN PageLimit int, IN PageNumber int)
COMMENT 'Lấy ra tất cả chứng từ'
BEGIN
  SET @rowIndex = 0;

  -- Trả về tổng số chứng từ điều chuyển tài sản
  SET TransferAssetTotal = (SELECT
      COUNT(*)
    FROM transfer_asset ta);

  SELECT
    *
  FROM (SELECT
      (@rowIndex := @rowIndex + 1) AS RowIndex,
      ta.*
    FROM transfer_asset ta) AS TransferAsset
  WHERE TransferAsset.RowIndex >= (PageNumber - 1) * PageLimit + 1
  AND TransferAsset.RowIndex <= PageLimit * PageNumber;
END
$$

--
-- Create procedure `Proc_GetTransferAssetByCode`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetTransferAssetByCode (IN TransferAssetCode varchar(20))
COMMENT 'Lấy ra một chừng từ điều chuyển theo mã chứng từ'
BEGIN
  SELECT
    *
  FROM transfer_asset ta
  WHERE ta.TransferAssetCode = TransferAssetCode;
END
$$

--
-- Create procedure `Proc_GetTransferAsset`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetTransferAsset (IN TransferAssetId char(36))
COMMENT 'Lẩy ra một chứng từ theo mã Id'
BEGIN
  SELECT
    *
  FROM transfer_asset ta
  WHERE ta.TransferAssetId = TransferAssetId;
END
$$

--
-- Create procedure `Proc_CreateTransferAsset`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_CreateTransferAsset (IN TransferAssetId char(36), IN TransferAssetCode varchar(20),
IN TransactionDate timestamp, IN TransferDate timestamp, IN Cost decimal(19, 4), IN RemainderCost decimal(19, 4),
IN Note varchar(255), IN CreatedBy varchar(50), IN CreateDate timestamp, IN ModifiedBy varchar(50), IN ModifiedDate timestamp)
COMMENT 'Tạo mới một chứng từ'
BEGIN
  INSERT INTO transfer_asset (TransferAssetId, TransferAssetCode, TransactionDate, TransferDate, Cost, RemainderCost, Note, CreatedBy, CreateDate, ModifiedBy, ModifiedDate)
    VALUES (TransferAssetId, TransferAssetCode, TransactionDate, TransferDate, Cost, RemainderCost, Note, CreatedBy, CreateDate, ModifiedBy, ModifiedDate);
END
$$

DELIMITER ;

--
-- Create table `transfer_asset_detail`
--
CREATE TABLE transfer_asset_detail (
  TransferAssetDetailId char(36) NOT NULL DEFAULT '' COMMENT 'Khóa chính',
  FixedAssetId char(36) NOT NULL DEFAULT '' COMMENT 'Id của tài sản',
  FixedAssetCode varchar(20) NOT NULL DEFAULT '' COMMENT 'Mã của tài sản',
  FixedAssetName varchar(100) NOT NULL DEFAULT '' COMMENT 'Tên của tài sản',
  Cost decimal(19, 4) UNSIGNED NOT NULL COMMENT 'Nguyên giá',
  RemainderCost decimal(19, 4) UNSIGNED NOT NULL COMMENT 'Giá trị còn lại',
  DepartmentId char(36) NOT NULL DEFAULT '' COMMENT 'Id của bộ phận đang sử dụng',
  DepartmentName varchar(100) NOT NULL DEFAULT '' COMMENT 'Tên bộ phận đang sử dụng',
  TransferDepartmentId char(36) NOT NULL DEFAULT '' COMMENT 'Id của bộ phận điều chuyển',
  TransferDepartmentName varchar(100) NOT NULL DEFAULT '' COMMENT 'Tên bộ phận điều chuyển',
  Reason varchar(255) NOT NULL DEFAULT '' COMMENT 'Lý do điều chuyển',
  TransferAssetId char(36) NOT NULL DEFAULT '' COMMENT 'Id của chứng từ',
  CreatedBy varchar(50) DEFAULT NULL COMMENT 'Người tạo',
  CreatedDate timestamp NULL DEFAULT NULL COMMENT 'Ngày tạo',
  ModifiedBy varchar(50) DEFAULT NULL COMMENT 'Người sửa đổi',
  ModifiedDate timestamp NULL DEFAULT NULL COMMENT 'Ngày sửa đổi',
  PRIMARY KEY (TransferAssetDetailId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Bảng chi tiết tài sản điều chuyển';

--
-- Create foreign key
--
ALTER TABLE transfer_asset_detail
ADD CONSTRAINT FK_transfer_asset_detail_TransferAssetId FOREIGN KEY (TransferAssetId)
REFERENCES transfer_asset (TransferAssetId);

DELIMITER $$

--
-- Create procedure `Proc_UpdateTransferAssetDetail`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_UpdateTransferAssetDetail (IN TransferAssetDetailId char(36), IN TransferAssetId char(36),
IN FixedAssetCode varchar(20), IN FixedAssetName varchar(100), IN Cost decimal(19, 4), IN RemainderCost decimal(19, 4),
IN FixedAssetId char(36), IN DepartmentId char(36), IN DepartmentName varchar(100),
IN TransferDepartmentId char(36), IN TransferDepartmentName varchar(100), IN ModifiedBy varchar(50),
IN ModifiedDate timestamp)
COMMENT 'Cập nhật một tài sản điều chuyển'
BEGIN
  UPDATE transfer_asset_detail tad
  SET tad.FixedAssetId = FixedAssetId,
      tad.FixedAssetCode = FixedAssetCode,
      tad.FixedAssetName = FixedAssetName,
      tad.Cost = Cost,
      tad.RemainderCost = RemainderCost,
      tad.DepartmentId = DepartmentId,
      tad.DepartmentName = DepartmentName,
      tad.TransferAssetId = TransferAssetId,
      tad.TransferDepartmentId = TransferDepartmentId,
      tad.TransferDepartmentName = TransferDepartmentName,
      tad.ModifiedBy = ModifiedBy,
      tad.ModifiedDate = ModifiedDate
  WHERE tad.TransferAssetDetailId = TransferAssetDetailId;
END
$$

--
-- Create procedure `Proc_GetTransferAssetDetails`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetTransferAssetDetails ()
COMMENT 'Lấy ra tất cả tài sản điều chuyển của tất cả chứng từ'
BEGIN
  SELECT
    *
  FROM transfer_asset_detail tad
  ORDER BY tad.ModifiedDate DESC;
END
$$

--
-- Create procedure `Proc_GetTransferAssetDetailPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetTransferAssetDetailPaging (OUT TransferAssetDetailTotal int, IN PageLimit int, IN PageNumber int,
IN TransferAssetId char(36))
BEGIN
  SET @rowIndex = 0;

  -- Trả về tổng số tài sản trong một chứng từ điều chuyển
  SET TransferAssetDetailTotal = (SELECT
      COUNT(*)
    FROM transfer_asset_detail tad);

  SELECT
    *
  FROM (SELECT
      (@rowIndex := @rowIndex + 1) AS RowIndex,
      tad.*
    FROM transfer_asset_detail tad
    WHERE tad.TransferAssetId = TransferAssetId) AS TransferAssetDetail
  WHERE TransferAssetDetail.RowIndex >= (PageNumber - 1) * PageLimit + 1
  AND TransferAssetDetail.RowIndex <= PageLimit * PageNumber;
END
$$

--
-- Create procedure `Proc_GetTransferAssetDetail`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetTransferAssetDetail (IN TransferAssetDetailId char(36))
COMMENT 'Lấy ra một tài sản điều chuyển theo Id'
BEGIN
  SELECT
    *
  FROM transfer_asset_detail tad
  WHERE tad.TransferAssetDetailId = TransferAssetDetailId;
END
$$

--
-- Create procedure `Proc_DeleteTransferAssetDetails`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DeleteTransferAssetDetails (IN TransferAssetId char(36))
COMMENT 'Xóa danh sách tài sản của một chứng từ điều chuyển'
BEGIN
  IF (EXISTS (SELECT
        *
      FROM transfer_asset_detail tad
      WHERE tad.TransferAssetId = TransferAssetId)) THEN
    DELETE
      FROM transfer_asset_detail
    WHERE transfer_asset_detail.TransferAssetId = TransferAssetId;
  END IF;
END
$$

--
-- Create procedure `Proc_DeleteTransferAssetDetail`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DeleteTransferAssetDetail (IN TransferAssetDetailId char(36))
COMMENT 'Xóa một tài sản điều chuyển'
BEGIN
  DELETE
    FROM transfer_asset_detail
  WHERE transfer_asset_detail.TransferAssetDetailId = TransferAssetDetailId;
END
$$

--
-- Create procedure `Proc_CreateTransferAssetDetail`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_CreateTransferAssetDetail (IN TransferAssetDetailId char(36), IN FixedAssetId char(36), IN FixedAssetCode varchar(20), IN FixedAssetName varchar(100),
IN Cost decimal(19, 4), IN RemainderCost decimal(19, 4), IN DepartmentId char(36), IN DepartmentName varchar(100), IN TransferDepartmentId char(36),
IN TransferDepartmentName varchar(100), IN Reason varchar(255), IN TransferAssetId char(36),
IN CreatedBy varchar(50), IN CreatedDate timestamp, IN ModifiedBy varchar(50), IN ModifiedDate timestamp)
COMMENT 'Tạo mới một tài sản điều chuyển'
BEGIN
  INSERT INTO transfer_asset_detail (TransferAssetDetailId, FixedAssetId, FixedAssetCode, FixedAssetName, Cost, RemainderCost, DepartmentId, DepartmentName, TransferDepartmentId, TransferDepartmentName, Reason, TransferAssetId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
    VALUES (TransferAssetDetailId, FixedAssetId, FixedAssetCode, FixedAssetName, Cost, RemainderCost, DepartmentId, DepartmentName, TransferDepartmentId, TransferDepartmentName, Reason, TransferAssetId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate);
END
$$

DELIMITER ;

--
-- Create table `receiver`
--
CREATE TABLE receiver (
  ReceiverId char(36) NOT NULL DEFAULT '' COMMENT 'Id của người nhận',
  `Order` int UNSIGNED DEFAULT NULL COMMENT 'Số thứ tự',
  Fullname varchar(100) DEFAULT NULL COMMENT 'Họ và tên của người nhận',
  Delegate varchar(100) DEFAULT NULL COMMENT 'Đại diện',
  Position varchar(100) DEFAULT NULL COMMENT 'Chức vụ',
  TransferAssetId char(36) NOT NULL DEFAULT '' COMMENT 'Id của chứng từ',
  CreatedBy char(50) DEFAULT NULL COMMENT 'Người tạo',
  CreatedDate timestamp NULL DEFAULT NULL COMMENT 'Ngày tạo',
  ModifiedBy char(50) DEFAULT NULL COMMENT 'Người sửa đổi',
  ModifiedDate timestamp NULL DEFAULT NULL COMMENT 'Ngày sửa đổi',
  PRIMARY KEY (ReceiverId, TransferAssetId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Người giao nhận';

--
-- Create foreign key
--
ALTER TABLE receiver
ADD CONSTRAINT FK_receiver_TransferAssetId FOREIGN KEY (TransferAssetId)
REFERENCES transfer_asset (TransferAssetId);

DELIMITER $$

--
-- Create procedure `Proc_UpdateReceiver`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_UpdateReceiver (IN ReceiverId char(36), IN `Order` int, IN Fullname varchar(100), IN Delegate varchar(100),
IN Position varchar(100), IN TransferAssetId char(36), IN ModifiedBy varchar(50), IN ModifiedDate timestamp)
COMMENT 'Cập nhật một người trong ban giao nhận'
BEGIN
  UPDATE receiver r
  SET r.`Order` = `Order`,
      r.Fullname = Fullname,
      r.Delegate = Delegate,
      r.Position = Position,
      r.TransferAssetId = TransferAssetId,
      r.ModifiedBy = Modified,
      r.ModifiedDate = ModifiedDate
  WHERE r.ReceiverId = ReceiverId;
END
$$

--
-- Create procedure `Proc_GetReceivers`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetReceivers ()
COMMENT 'Lấy ra danh sách tất cả người ở các ban giao nhận'
BEGIN
  SELECT
    *
  FROM receiver r
  ORDER BY r.ModifiedDate DESC;
END
$$

--
-- Create procedure `Proc_GetReceiver`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetReceiver (IN ReceiverId char(36))
COMMENT 'Lấy ra một người ở ban giao nhận theo Id'
BEGIN
  SELECT
    *
  FROM receiver r
  WHERE r.ReceiverId = ReceiverId;
END
$$

--
-- Create procedure `Proc_DeleteReceivers`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DeleteReceivers (IN TransferAssetId char(36))
COMMENT 'Xóa ban giao nhận của một chứng từ'
BEGIN
  IF (EXISTS (SELECT
        *
      FROM receiver r
      WHERE r.TransferAssetId = TransferAssetId)) THEN
    DELETE
      FROM receiver
    WHERE receiver.TransferAssetId = TransferAssetId;
  END IF;
END
$$

--
-- Create procedure `Proc_DeleteTransferAsset`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DeleteTransferAsset (IN TransferAssetId char(36))
BEGIN
  CALL Proc_DeleteTransferAssetDetails(TransferAssetId);
  CALL Proc_DeleteReceivers(TransferAssetId);
  DELETE
    FROM transfer_asset
  WHERE transfer_asset.TransferAssetId = TransferAssetId;

END
$$

--
-- Create procedure `Proc_DeleteReceiver`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DeleteReceiver (IN ReceiverId char(36))
COMMENT 'Xóa một người giao nhận'
BEGIN
  DELETE
    FROM receiver
  WHERE receiver.ReceiverId = ReceiverId;
END
$$

--
-- Create procedure `Proc_CreateReceiver`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_CreateReceiver (IN ReceiverId char(36), IN `Order` int, IN Fullname varchar(100), IN Delegate varchar(100),
IN Position varchar(100), IN TransferAssetId char(36), IN CreatedBy varchar(50), IN CreatedDate timestamp, IN ModifiedBy varchar(50),
IN ModifiedDate timestamp)
COMMENT 'Tạo một người giao nhận'
BEGIN
  INSERT INTO receiver (ReceiverId, `Order`, Fullname, Delegate, Position, TransferAssetId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
    VALUES (ReceiverId, `Order`, Fullname, Delegate, Position, TransferAssetId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate);
END
$$

DELIMITER ;

--
-- Create table `department`
--
CREATE TABLE department (
  DepartmentId char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'Id của phòng ban',
  DepartmentCode varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT 'Mã của phòng ban',
  DepartmentName varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT 'Tên phòng ban',
  Description varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'Ghi chú',
  IsParent bit(1) DEFAULT NULL COMMENT 'Có phải là cha không',
  ParentId char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'Id phòng ban cha',
  OrganizationId char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'Id của đơn vị',
  CreatedBy varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'Người tạo',
  CreatedDate timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày tạo',
  ModifiedBy varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'Người sửa',
  ModifiedDate timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày sửa',
  PRIMARY KEY (DepartmentId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Danh mục phòng ban';

--
-- Create index `DepartmentCode` on table `department`
--
ALTER TABLE department
ADD UNIQUE INDEX DepartmentCode (DepartmentCode);

DELIMITER $$

--
-- Create procedure `Proc_UpdateDepartment`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_UpdateDepartment (IN DepartmentId char(36), IN DepartmentCode varchar(20), IN DepartmentName varchar(100),
IN Description varchar(255), IN IsParent bit(1), IN ParentId char(36), IN OrganizationId char(36), IN ModifiedBy varchar(50), IN ModifiedDate timestamp)
COMMENT 'Cập nhật dữ liệu một phòng ban'
BEGIN
  UPDATE department d
  SET d.DepartmentCode = DepartmentCode,
      d.DepartmentName = DepartmentName,
      d.Description = Description,
      d.IsParent = IsParent,
      d.ParentId = ParentId,
      d.OrganizationId = OrganizationId,
      d.ModifiedBy = ModifiedBy,
      d.ModifiedDate = ModifiedDate
  WHERE d.DepartmentId = DepartmentId;
END
$$

--
-- Create procedure `Proc_GetDepartments`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetDepartments ()
COMMENT 'Lấy ra tất cả phòng ban'
BEGIN
  SELECT
    *
  FROM department d
  ORDER BY d.ModifiedDate DESC;
END
$$

--
-- Create procedure `Proc_GetDepartmentByCode`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetDepartmentByCode (IN DepartmentCode varchar(20))
COMMENT 'Lấy ra một phòng ban theo mã phòng ban'
BEGIN
  SELECT
    *
  FROM department d
  WHERE d.DepartmentCode = DepartmentCode;
END
$$

--
-- Create procedure `Proc_GetDepartment`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetDepartment (IN DepartmentId char(36))
COMMENT 'Lấy ra một phòng ban theo id của phòng ban'
BEGIN

  SELECT
    *
  FROM department d
  WHERE d.DepartmentId = DepartmentId;
END
$$

--
-- Create procedure `Proc_DeleteDepartment`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DeleteDepartment (IN DepartmentId char(36))
COMMENT 'Xóa một phòng ban'
BEGIN
  DELETE
    FROM department
  WHERE department.DepartmentId = DepartmentId;
END
$$

--
-- Create procedure `Proc_CreateDepartment`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_CreateDepartment (IN DepartmentId char(36), IN DepartmentCode varchar(20), IN DepartmentName varchar(100),
IN Description varchar(255), IN IsParent bit(1), IN ParentId char(36), IN OrganizationId char(36),
IN CreatedBy varchar(50), IN CreatedDate timestamp, IN ModifiedBy varchar(50), IN ModifiedDate timestamp)
COMMENT 'Tạo mới một phòng ban'
BEGIN
  INSERT INTO department (DepartmentId, DepartmentCode, DepartmentName, Description, IsParent, ParentId, OrganizationId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
    VALUES (DepartmentId, DepartmentCode, DepartmentName, Description, IsParent, ParentId, OrganizationId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate);

END
$$

--
-- Create procedure `Proc_GetFixedAssetPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetFixedAssetPaging (IN FixedAssetCodeOrName varchar(100), IN DepartmentName varchar(100),
IN FixedAssetCategoryName varchar(100), IN PageLimit int, IN PageNumber int)
COMMENT 'Phân trang tài sản'
BEGIN
  -- Khởi tạo biến lưu câu truy vấn
  SET @RowIndex = 0;
  SET @WhereQuery = 'SELECT (@RowIndex:=@RowIndex+1) AS RowIndex, fa.* FROM fixed_asset fa ';

  -- Cắt bỏ phần khoảng trắng đầu và cuối
  SET FixedAssetCodeOrName = TRIM(FixedAssetCodeOrName);
  SET DepartmentName = TRIM(DepartmentName);
  SET FixedAssetCategoryName = TRIM(FixedAssetCategoryName);

  -- Nếu FixedAssetCodeOrName rỗng
  IF (ISNULL(FixedAssetCodeOrName)) THEN
    SET FixedAssetCodeOrName = '';
  END IF;

  -- Nếu DepartmentName rỗng
  IF (ISNULL(DepartmentName)) THEN
    SET DepartmentName = '';
  END IF;

  -- Nếu FixedAssetCategoryName rỗng
  IF (ISNULL(FixedAssetCategoryName)) THEN
    SET FixedAssetCategoryName = '';
  END IF;

  -- Chỉ search theo FixedAssetCodeOrName
  IF (FixedAssetCodeOrName <> ''
    AND DepartmentName = ''
    AND FixedAssetCategoryName = '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE fa.FixedAssetCode = ', QUOTE(FixedAssetCodeOrName), ' OR fa.FixedAssetName = ',
    QUOTE(FixedAssetCodeOrName));

  -- Chỉ search theo FixedAssetCodeOrName và DepartmentName
  ELSEIF (FixedAssetCodeOrName <> ''
    AND DepartmentName <> ''
    AND FixedAssetCategoryName = '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE (fa.FixedAssetCode = ', QUOTE(FixedAssetCodeOrName), ' OR fa.FixedAssetName = ',
    QUOTE(FixedAssetCodeOrName), ') AND fa.DepartmentName = ', QUOTE(DepartmentName));

  -- Chỉ search theo FixedAssetCodeOrName và FixedAssetCategoryName
  ELSEIF (FixedAssetCodeOrName <> ''
    AND DepartmentName = ''
    AND FixedAssetCategoryName <> '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE (fa.FixedAssetCode = ', QUOTE(FixedAssetCodeOrName), ' OR fa.FixedAssetName = ',
    QUOTE(FixedAssetCodeOrName), ') AND fa.FixedAssetCategoryName = ', QUOTE(FixedAssetCategoryName));

  -- Chỉ search theo DepartmentName và FixedAssetCategoryName
  ELSEIF (FixedAssetCodeOrName = ''
    AND DepartmentName <> ''
    AND FixedAssetCategoryName <> '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE fa.DepartmentName = ', QUOTE(DepartmentName),
    ' AND fa.FixedAssetCategoryName = ', QUOTE(FixedAssetCategoryName));

  -- Chỉ search theo DepartmentName
  ELSEIF (FixedAssetCodeOrName = ''
    AND DepartmentName <> ''
    AND FixedAssetCategoryName = '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE fa.DepartmentName = ', QUOTE(DepartmentName));

  -- Chỉ search theo FixedAssetCategoryName
  ELSEIF (FixedAssetCodeOrName = ''
    AND DepartmentName = ''
    AND FixedAssetCategoryName <> '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE fa.FixedAssetCategoryName = ', QUOTE(FixedAssetCategoryName));

  -- Search theo FixedAssetCodeOrName và DepartmentName và FixedAssetCategoryName
  ELSEIF (FixedAssetCodeOrName <> ''
    AND DepartmentName <> ''
    AND FixedAssetCategoryName <> '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE (fa.FixedAssetCode = ', QUOTE(FixedAssetCodeOrName), ' OR fa.FixedAssetName = ',
    QUOTE(FixedAssetCodeOrName), ') AND fa.DepartmentName = ', QUOTE(DepartmentName),
    ' AND fa.FixedAssetCategoryName = ', QUOTE(FixedAssetCategoryName));
  END IF;

  -- Lấy theo ngày sửa đổi gần nhất
  SET @WhereQuery = CONCAT(@WhereQuery, ' ORDER BY fa.ModifiedDate DESC');


  -- Lấy theo số trang và số bản ghi trong một trang
  SET @WhereQuery = CONCAT('SELECT * FROM (', @WhereQuery, ') AS Asset WHERE Asset.RowIndex >= ', (PageNumber - 1) * PageLimit + 1,
  ' AND Asset.RowIndex <= ', PageNumber * PageLimit);

  -- Thực thi câu truy vấn
  PREPARE query FROM @WhereQuery;
  EXECUTE query;
  DEALLOCATE PREPARE query;
END
$$

--
-- Create procedure `Proc_GetFixedAssetFilter`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetFixedAssetFilter (IN FixedAssetCodeOrName varchar(100), IN DepartmentName varchar(100), IN FixedAssetCategoryName varchar(100))
COMMENT 'Lọc danh sách tài sản'
BEGIN
  -- Khởi tạo biến lưu câu truy vấn
  SET @WhereQuery = 'SELECT * FROM fixed_asset fa ';

  -- Cắt bỏ phần khoảng trắng đầu và cuối
  SET FixedAssetCodeOrName = TRIM(FixedAssetCodeOrName);
  SET DepartmentName = TRIM(DepartmentName);
  SET FixedAssetCategoryName = TRIM(FixedAssetCategoryName);

  -- Nếu FixedAssetCodeOrName rỗng
  IF (ISNULL(FixedAssetCodeOrName)) THEN
    SET FixedAssetCodeOrName = '';
  END IF;

  -- Nếu DepartmentName rỗng
  IF (ISNULL(DepartmentName)) THEN
    SET DepartmentName = '';
  END IF;

  -- Nếu FixedAssetCategoryName rỗng
  IF (ISNULL(FixedAssetCategoryName)) THEN
    SET FixedAssetCategoryName = '';
  END IF;

  -- Chỉ search theo FixedAssetCodeOrName
  IF (FixedAssetCodeOrName <> ''
    AND DepartmentName = ''
    AND FixedAssetCategoryName = '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE fa.FixedAssetCode = ', QUOTE(FixedAssetCodeOrName), ' OR fa.FixedAssetName = ',
    QUOTE(FixedAssetCodeOrName));

  -- Chỉ search theo FixedAssetCodeOrName và DepartmentName
  ELSEIF (FixedAssetCodeOrName <> ''
    AND DepartmentName <> ''
    AND FixedAssetCategoryName = '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE (fa.FixedAssetCode = ', QUOTE(FixedAssetCodeOrName), ' OR fa.FixedAssetName = ',
    QUOTE(FixedAssetCodeOrName), ') AND fa.DepartmentName = ', QUOTE(DepartmentName));

  -- Chỉ search theo FixedAssetCodeOrName và FixedAssetCategoryName
  ELSEIF (FixedAssetCodeOrName <> ''
    AND DepartmentName = ''
    AND FixedAssetCategoryName <> '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE (fa.FixedAssetCode = ', QUOTE(FixedAssetCodeOrName), ' OR fa.FixedAssetName = ',
    QUOTE(FixedAssetCodeOrName), ') AND fa.FixedAssetCategoryName = ', QUOTE(FixedAssetCategoryName));

  -- Chỉ search theo DepartmentName và FixedAssetCategoryName
  ELSEIF (FixedAssetCodeOrName = ''
    AND DepartmentName <> ''
    AND FixedAssetCategoryName <> '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE fa.DepartmentName = ', QUOTE(DepartmentName),
    ' AND fa.FixedAssetCategoryName = ', QUOTE(FixedAssetCategoryName));

  -- Chỉ search theo DepartmentName
  ELSEIF (FixedAssetCodeOrName = ''
    AND DepartmentName <> ''
    AND FixedAssetCategoryName = '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE fa.DepartmentName = ', QUOTE(DepartmentName));

  -- Chỉ search theo FixedAssetCategoryName
  ELSEIF (FixedAssetCodeOrName = ''
    AND DepartmentName = ''
    AND FixedAssetCategoryName <> '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE fa.FixedAssetCategoryName = ', QUOTE(FixedAssetCategoryName));

  -- Search theo FixedAssetCodeOrName và DepartmentName và FixedAssetCategoryName
  ELSEIF (FixedAssetCodeOrName <> ''
    AND DepartmentName <> ''
    AND FixedAssetCategoryName <> '') THEN
    SET @WhereQuery = CONCAT(@WhereQuery, 'WHERE (fa.FixedAssetCode = ', QUOTE(FixedAssetCodeOrName), ' OR fa.FixedAssetName = ',
    QUOTE(FixedAssetCodeOrName), ') AND fa.DepartmentName = ', QUOTE(DepartmentName),
    ' AND fa.FixedAssetCategoryName = ', QUOTE(FixedAssetCategoryName));
  END IF;

  -- Thực thi câu truy vấn
  PREPARE query FROM @WhereQuery;
  EXECUTE query;
  DEALLOCATE PREPARE query;
END
$$

DELIMITER ;

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;